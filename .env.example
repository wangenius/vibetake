###############################################
# 环境变量示例与调用说明 (.env.example)
# 语言：中文说明 + 详细调用环节
# 使用方法：复制为 .env 并按需修改
###############################################

# 数据库配置
# 用途：供 Drizzle ORM/数据库客户端连接数据库。
# 主要调用环节：
# - 服务器端的数据库读写（例如用户注册/登录状态持久化、订单等）。
# - `drizzle.config.ts` 使用此连接串进行迁移/生成类型。
# 本地 PostgreSQL 示例：postgresql://用户名:密码@localhost:5432/数据库名
# Supabase 示例：在 Supabase 项目设置 -> Database -> Connection string 中获取
# 格式：postgresql://postgres:[password]@[host]:5432/postgres
DATABASE_URL=postgresql://postgres:password@localhost:5432/your_database


# Better Auth 身份认证配置
# 用途：配置 Better Auth 服务端与前端可见的基地址，以及签名/加密用的密钥。
# 主要调用环节：
# - 服务端路由（如 `src/app/login/page.tsx` 相关的 API 调用链，通过 `src/lib/axios.ts` 指向的基地址）。
# - 前端代码需要可见的公开 URL（以 NEXT_PUBLIC_ 前缀暴露给浏览器）。
# - 服务器端生成/验证会话、Token 时使用 `BETTER_AUTH_SECRET`。
BETTER_AUTH_URL=http://localhost:3000
NEXT_PUBLIC_BETTER_AUTH_URL=http://localhost:3000
BETTER_AUTH_SECRET=better-auth-secret


# Stripe 支付配置
# 用途：集成 Stripe 支付，服务端创建支付意图、验证 Webhook；前端加载可公开的 Publishable Key。
# 主要调用环节：
# - 服务端：
#   - `src/app/api/payment/create/route.ts` 使用 `STRIPE_SECRET_KEY` 调 Stripe API 创建支付会话/意图。
#   - `src/app/api/payment/status/route.ts` 用于查询支付状态。
#   - Webhook 处理（若有实现）使用 `STRIPE_WEBHOOK_SECRET` 验证事件签名。
# - 前端：
#   - 通过 `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY` 初始化 Stripe.js，在诸如 `src/app/payment/page.tsx` 等页面中发起支付流程。
# 获取位置：Stripe 控制台 https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY=sk_test_51...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_51...
STRIPE_WEBHOOK_SECRET=whsec_...


# 应用基础配置
# 用途：提供应用对外可访问的基础 URL（前端/服务端皆可引用）。
# 主要调用环节：
# - 前端构造跳转链接（如支付成功页 `src/app/payment/success/page.tsx`）。
# - 客户端发起到自身 API 的相对/绝对地址拼接（参见 `src/lib/axios.ts`）。
NEXT_PUBLIC_APP_URL=http://localhost:3000
